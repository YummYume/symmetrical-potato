name: Testing E2E

on:
  pull_request:
    branches:
      - '**'
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    paths:
      - "api/**"
      - "front/**"
      - "docker/CI/**"
      - ".github/workflows/test-e2e.yml"

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-e2e:
    name: Test E2E

    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:11.1.2
        ports:
          - 3306:3306
        env:
          MARIADB_ROOT_PASSWORD: root
        options: --health-cmd="healthcheck.sh --su-mysql --connect --innodb_initialized" --health-interval=10s --health-timeout=5s --health-retries=3

      mailcatcher:
        image: schickling/mailcatcher:latest
        ports:
          - 1025:1025

      rabbitmq:
        image: rabbitmq:management-alpine
        ports:
          - 5672:5672

    env:
      extensions: amqp, intl, pdo_mysql, pcntl
      php_version: '8.2'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.php_version }}
          extensions: ${{ env.extensions }}

      - name: Start PHP fpm
        run: |
          sudo apt-get install -y php8.2-fpm
          sudo service php8.2-fpm start

      - name: Get composer cache directory
        id: composer-cache
        working-directory: ./api
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Change APP_ENV
        run: echo 'APP_ENV=test' > ./api/.env.local

      - name: Copy .env.ci to .env.test.local
        run: cp ./api/.env.ci ./api/.env.test.local

      - name: Copy google credentials
        run: echo 'GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}' >> ./api/.env.test.local

      - name: Install dependencies
        working-directory: ./api
        run: composer install --prefer-dist

      - name: Copy .env.ci to .env.local
        run: cp ./front/.env.ci ./front/.env.local

      - name: Copy google credentials
        run: echo 'GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}' >> ./front/.env.local

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.20

      - name: Caching dependencies
        uses: actions/cache@v3
        id: cache-modules
        with:
          path: ./front/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}-node-modules

      - name: Cache CSS build
        uses: actions/cache@v3
        id: cache-css
        with:
          path: ./front/app/styles
          key: ${{ runner.os }}-remix-css-${{ hashFiles('front/tailwind.config.ts', 'front/styles/**/*.css', 'front/styles/**/*.scss') }}

      - name: Cache translations build
        uses: actions/cache@v3
        id: cache-translations
        with:
          path: ./front/public/locales
          key: ${{ runner.os }}-remix-translations-${{ hashFiles('front/locales/**/*') }}

      - name: Cache client build
        uses: actions/cache@v3
        id: cache-client
        with:
          path: ./front/public/build
          key: ${{ runner.os }}-remix-client-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('front/**/*.js', 'front/**/*.jsx', 'front/**/*.ts', 'front/**/*.tsx', 'front/**/*.css', 'front/**/*.scss', 'front/**/*.json', '!front/public/build/**', '!front/build/**') }}

      - name: Cache server build
        uses: actions/cache@v3
        id: cache-server
        with:
          path: ./front/build
          key: ${{ runner.os }}-remix-server-${{ hashFiles('front/**/bun.lockb') }}-${{ hashFiles('front/**/*.js', 'front/**/*.jsx', 'front/**/*.ts', 'front/**/*.tsx', 'front/**/*.css', 'front/**/*.scss', 'front/**/*.json', '!front/public/build/**', '!front/build/**') }}

      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        working-directory: ./front
        run: bun install --frozen-lockfile

      - name: Build CSS
        if: steps.cache-css.outputs.cache-hit != 'true'
        working-directory: ./front
        run: bun run build:css

      - name: Build translations
        if: steps.cache-translations.outputs.cache-hit != 'true'
        working-directory: ./front
        run: bun run build:translations

      - name: Front building phase
        if: steps.cache-client.outputs.cache-hit != 'true' || steps.cache-server.outputs.cache-hit != 'true' || steps.cache-css.outputs.cache-hit != 'true'
        working-directory: ./front
        run: bun run build:remix

      - name: Server building phase
        working-directory: ./front
        run: bun run build:server

      - name: Start server
        working-directory: ./front
        run: bun run start &

      - name: Install Caddy
        run: |
          sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https
          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
          sudo apt update
          sudo apt install caddy

      - name: Run Caddy
        run: |
          sudo systemctl stop caddy
          sudo caddy run --config docker/CI/caddy/Caddyfile &

      # DEBUG

      - name: Curl localhost
        run: curl http://127.0.0.1

      - name: Curl graphql
        run: |
          curl http://127.0.0.1:9000
          curl http://127.0.0.1:9000/graphql
          curl http://127.0.0.1:9000/doesntexist

      - name: Check logs
        run: sudo systemctl status caddy

      - name: Check PHP FPM logs
        run: sudo cat /var/log/php8.2-fpm.log

      # END DEBUG

      - name: Load Fixtures
        working-directory: ./api
        run: |
          php bin/console doctrine:database:drop --if-exists --force --env=test
          php bin/console doctrine:database:create --env=test
          php bin/console doctrine:schema:create --env=test
          php bin/console doctrine:fixtures:load --env=test --no-interaction
          php bin/console lexik:jwt:generate-keypair --skip-if-exists

      - name: Run tests
        working-directory: ./E2E
        run: |
          bun install
          bunx playwright install --with-deps
          BASE_URL=http://127.0.0.1 bunx playwright test

      - name: Upload report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: E2E/test-results
          retention-days: 30
